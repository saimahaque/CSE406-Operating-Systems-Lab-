# Round Robin Scheduling in Python

pid = []
arr_t = []
bt = []

n = int(input("Enter number of processes: "))
print("Take input for Process ID, Arrival Time, Burst Time:")
for i in range(n):
    print(f"\nFor Process {i+1}:")
    pid_val = int(input("Process ID: "))
    arr_val = int(input("Arrival Time: "))
    bt_val = int(input("Burst Time: "))

    pid.append(pid_val)
    arr_t.append(arr_val)
    bt.append(bt_val)

quantum = int(input("\nEnter Time Quantum: "))


remaining_bt = bt[:]
ct = [0] * n
tat = [0] * n
wt = [0] * n
complete = 0
time = 0
visited = [False] * n
queue = []


while complete < n:
    for i in range(n):
        if arr_t[i] <= time and remaining_bt[i] > 0 and not visited[i] :
            queue.append(i)
            visited[i]=True


    if not queue:
        time += 1
        continue

    idx = queue.pop(0)

    if remaining_bt[idx] > quantum:
        time += quantum
        remaining_bt[idx] -= quantum
    else:
        time += remaining_bt[idx]
        remaining_bt[idx] = 0
        ct[idx] = time
        complete += 1


    for i in range(n):
        if arr_t[i] <= time and remaining_bt[i] > 0 and not visited[i]:
            queue.append(i)
            visited[i] = True

    if remaining_bt[idx] > 0:
        queue.append(idx)


for i in range(n):
    tat[i] = ct[i] - arr_t[i]
    wt[i] = tat[i] - bt[i]


print("\nPID\tAT\tBT\tCT\tTAT\tWT")
for i in range(n):
    print(f"{pid[i]}\t{arr_t[i]}\t{bt[i]}\t{ct[i]}\t{tat[i]}\t{wt[i]}")
